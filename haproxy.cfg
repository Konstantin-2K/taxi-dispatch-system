global
    log /dev/log    local0
    log /dev/log    local1 notice
    maxconn 4096
    user haproxy
    group haproxy
    tune.ssl.default-dh-param 2048

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    retries 3
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

frontend main
    bind *:80
    bind *:443 ssl crt /etc/haproxy/certs/haproxy.pem
    
    # Set headers for SSL
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    
    # Redirect HTTP to HTTPS (moved after http-request directive)
    redirect scheme https if !{ ssl_fc }
    
    # Add HSTS header when SSL is used
    http-response set-header Strict-Transport-Security max-age=15768000
    
    # ACL for websocket detection
    acl is_websocket hdr(Upgrade) -i WebSocket
    acl is_websocket hdr_beg(Host) -i ws
    
    # Default backend
    default_backend web_servers

backend web_servers
    balance roundrobin
    
    # Add the missing option httpchk directive
    option httpchk
    http-check send meth GET uri / ver HTTP/1.1 hdr Host localhost
    
    # Sticky session using cookie
    cookie SERVERID insert indirect nocache
    
    # Enable websocket support
    option http-server-close
    option forwardfor
    
    # Special handling for Socket.io connections
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    
    # WebSocket configuration
    option http-pretend-keepalive
    
    # Define your servers
    server web1 192.168.0.174:3000 check cookie web1 weight 1 maxconn 1000
    server web2 192.168.111.137:3000 check cookie web2 weight 1 maxconn 1000
